include ../src/reliable.repy

def expect(value, failure_message):
  if not value:
    print "Failed expectation:", failure_message

def run_tests():
  test_immediate_receive()
  test_delayed_receive()
  test_duplicate_receive()
  test_multiple_packets()
  test_delay_without_retries()

def reset_state():
  # This is important because reliable_recvmess will alternate between 
  # sequence numbers but we want to start at 0 for each test because that's 
  # what the reliable_sendmess does.
  mycontext['seqnumber'] = 0
  reliable_config(512, 3, 1000)

def receive(callback):
  def wrapped_callback(sender_ip, sender_port, message, commhandle):
    callback()
  return reliable_recvmess('127.0.0.1', 12346, wrapped_callback)

def send(message):
  return reliable_sendmess('127.0.0.1', 12346, message, '127.0.0.1', 12345)

def test_immediate_receive():
  reset_state()
  mycontext['immediate_receive'] = False
  def onreceive():
    mycontext['immediate_receive'] = True
  
  receive(onreceive)
  send('test')
  
  expect(mycontext['immediate_receive'], "Message is immediately received")

def test_delayed_receive():
  reset_state()
  mycontext['delayed_receive'] = False
  def onreceive():
    mycontext['delayed_receive'] = True
  
  settimer(1.5, receive, [onreceive])
  send('test')
  
  expect(mycontext['delayed_receive'], "Message is eventually received")

def test_duplicate_receive():
  reset_state()
  mycontext['duplicate_receive'] = False
  def onreceive(lock):
    mycontext['duplicate_receive'] = False
    lock.release()
  def ontimeout(lock):
    mycontext['duplicate_receive'] = True
    lock.release()
  
  commhandle = receive(onreceive)
  
  # Fake a message that would have been sent if the previous ACK from the 
  # receiver was lost. Since the receiver begins waiting for 0, it should
  # simply ignore this message.
  sendmess('127.0.0.1', 12346, '1,test', '127.0.0.1', 12345)
  
  # If we have not received an ACK after 2 seconds, we should be alright.
  lock = getlock()
  settimer(2, ontimeout, [lock])
  lock.acquire() # This one will succeed immediately.
  lock.acquire() # This one will only succeed after one of the callbacks.
  stopcomm(commhandle)
  
  expect(mycontext['duplicate_receive'], "ACK is not sent for duplicate packet")

def test_multiple_packets():
  reset_state()
  reliable_config(4, 3, 1000)
  mycontext['multiple_packets'] = 0
  
  def onreceive_first():
    mycontext['multiple_packets'] += 1
    receive(onreceive_second) # Receive the second packet.
    
  def onreceive_second():
    mycontext['multiple_packets'] += 1
  
  receive(onreceive_first) # Receive the first packet.
  send('testte') # Should result in two packets.
  
  expect(mycontext['multiple_packets'] == 2, "Multiple packets are received")

def test_delay_without_retries():
  reset_state()
  reliable_config(512, 0, 2000)
  mycontext['delay_without_retries'] = False
  
  def onhalftimeout():
    mycontext['delay_without_retries'] = False
    lock.release()
  
  lock = getlock()
  lock.acquire()
  
  settimer(1, onhalftimeout, [])
  try:
    send('test')
  except Exception:
    pass # We are expecting a timeout so this is okay.
  mycontext['delay_without_retries'] = True
  
  # Either we acquire this lock immediately, in which case everything is fine,
  # or we wait until onhalftimeout runs, in which case we didn't have a proper
  # timeout after all.
  lock.acquire()
  
  expect(mycontext['delay_without_retries'], "Delay occurs even without retries")

if callfunc == 'initialize':
  run_tests()