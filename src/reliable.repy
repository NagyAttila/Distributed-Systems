class TimeoutError(Exception):
  def __init__(self, tries):
    self.tries = tries
  def __str__(self):
    return "Client fails sending after " + str(self.tries) + " retries"

mycontext['seqnumber'] = 0
def reliable_recvmess(receiver_ip, receiver_port, function):
  expected_seqnumber = mycontext['seqnumber']
  def onreceive(sender_ip, sender_port, message, commhandle):
    actual_seqnumber = int(message[0])
    if actual_seqnumber == expected_seqnumber:
      mycontext['seqnumber'] = 1 - mycontext['seqnumber']
      stopcomm(commhandle)
      sendmess(sender_ip, sender_port, str(actual_seqnumber), receiver_ip, receiver_port)
      function(sender_ip, sender_port, message, commhandle)
  return recvmess(receiver_ip, receiver_port, onreceive)

def chunks(message, chunk_length):
  indexes = range(0, len(message), chunk_length)
  return [ message[i:i+chunk_length] for i in indexes ]

def reliable_sendmess(receiver_ip, receiver_port, message, sender_ip=None, sender_port=None):
  dgramsize = mycontext["maxdgramsize"]
  payloads = chunks(message, dgramsize)
  
  total_bytes = 0
  header_length = 1 + len(mycontext["delim"])
  seqnumber = 0
  retries = mycontext["retries"]
  
  for payload in payloads:
    bytes = reliable_try_send_packet(receiver_ip, receiver_port, payload, seqnumber, retries, sender_ip, sender_port)
    total_bytes = total_bytes + bytes - header_length
    seqnumber = 1 - seqnumber
  
  return total_bytes

def reliable_try_send_packet(receiver_ip, receiver_port, payload, seqnumber, retries, sender_ip=None, sender_port=None):
  wrapped_message = str(seqnumber) + ',' + payload
  mycontext['retries_left'] = retries
  mycontext['timer'] = None
  mycontext['sent'] = False
  mycontext['bytes'] = 0
  # float() is important or we will get integer division.
  timeout_seconds = float(mycontext["timeoutinms"]) / 1000
  
  def send():
    mycontext['timer'] = settimer(timeout_seconds, ack_timeout, [])
    mycontext['bytes'] = sendmess(receiver_ip, receiver_port, wrapped_message, sender_ip, sender_port)
  
  def ack_timeout():
    if mycontext['retries_left'] > 0:
      mycontext['retries_left'] = mycontext['retries_left'] - 1
      send()
    else:
      mycontext['sent'] = False # Not necessary, but makes it clear what happens here.
      lock.release()
  
  def ack_received(remoteip, remoteport, ack_message, commhandle):
    # We have received a packet from the client, but the ACK number is not 
    # relevant, because we're only waiting for a single ACK at any given time.
    mycontext['sent'] = True # Ensure that we return correctly at the end of this function.
    
    canceltimer(mycontext['timer']) # Stop retrying.
    lock.release()
  
  lock = getlock()
  lock.acquire()
  
  send()
  
  commhandle = recvmess(sender_ip, sender_port, ack_received)
  
  lock.acquire()
  
  # Wait for the lock to be released after a set number of timeouts of after an ACK is received.
  
  stopcomm(commhandle)
	
  if mycontext['sent'] or mycontext['retries'] == 0:
    return mycontext['bytes']
  else:
    raise TimeoutError(mycontext['retries'])
    #raise Exception("Client fails sending after " + str(mycontext['retries']) + " retries")

mycontext["delim"] = ","
mycontext["maxdgramsize"] = 512
mycontext["retries"] = 4
mycontext["timeoutinms"] = 10
def reliable_config(maxdgramsize, retries, timeoutinms):
  mycontext["maxdgramsize"] = maxdgramsize
  mycontext["retries"] = retries
  mycontext["timeoutinms"] = timeoutinms
  
  # Disable retransmissions when timeout is zero, as per specification.
  if mycontext["timeoutinms"] == 0:
    mycontext["retries"] = 0

def get_payload(message):
  header_length = 1 + len(mycontext["delim"])
  return message[header_length:]
