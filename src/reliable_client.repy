include reliable.repy 

def usage():

def checkArgs():
  n = len(callargs)
  if not n == 3 and \
    not n == 5 and \
    not n == 6 and \
    not n == 8:
    usage()
    exitall()

def parseArgs():
  mycontext['srchost'] = getmyip()
  mycontext['srcportnum'] = 12345
  mycontext['maxdgramsize'] = 512
  mycontext['nretries'] = 4
  mycontext['timeoutms'] = 10

  n = len(callargs)
  if n >= 3:
    mycontext['inputfile'] = callargs[0]
    mycontext['serverhost'] = callargs[1]
    mycontext['serverportnum'] = int(callargs[2])
  if n == 5 or n == 8:
    mycontext['srchost'] = callargs[3]
    mycontext['srcportnum'] = int(callargs[4])
  if n == 6:
    mycontext['maxdgramsize'] = int(callargs[3])
    mycontext['nretries']= int(callargs[4])
    mycontext['timeoutms'] = int(callargs[5])
  if n == 8:
    mycontext['maxdgramsize'] = int(callargs[5])
    mycontext['nretries']= int(callargs[6])
    mycontext['timeoutms'] = int(callargs[7])

if callfunc == 'initialize':
  checkArgs()
  parseArgs()

  reliable_config( mycontext['maxdgramsize'],\
                   mycontext['nretries'],\
                   mycontext['timeoutms'])

  f = None 
  try:
    f = open(mycontext['inputfile'], 'r')
  except IOError as e:
    exitall()

  data = f.read()

  transmitted_bytes = None
  try:
    reliable_sendmess( mycontext['serverhost'],\
                        mycontext['serverportnum'], \
                        data, \
                        mycontext['srchost'], \
                        mycontext['srcportnum'])
  except TimeoutError as e:
    print "ERROR:",e

  f.close()

