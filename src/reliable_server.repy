include reliable.repy 

def usage():
  print "outfile portnum [timeout]"
  print "timeout is in seconds, default: 10sec"

def checkArgs():
  n = len(callargs)
  if not n == 2 and \
     not n == 3:
    usage()
    exitall()

def parseArgs():
  mycontext['p_timeout'] = 10
  n = len(callargs)
  if n >= 2:
    mycontext['p_outfile'] = callargs[0]
    mycontext['p_portnum'] = int(callargs[1])
  if n == 3:
    mycontext['p_timeout'] = int(callargs[2])

def setTimeout():
  mycontext['timeoutTimer'] = settimer(mycontext['p_timeout'], timeoutExpired, [])

def cancelTimeout():
  canceltimer(mycontext['timeoutTimer'])

def resetTimeout():
  cancelTimeout()
  setTimeout()

def timeoutExpired():
  print mycontext['p_timeout'],"second(s) has pasted since last received message."
  stopLogging()
  exitall()

def startReceiving():
  myip = None
  if mycontext['p_portnum'] == 12345 or \
      mycontext['p_portnum'] == 12346:
    myip = "127.0.0.1"
  else:
    myip = getmyip()

  def receiveMsg(remoteip, remoteport, message, commhandle):
    payload = get_payload(message)
    log(payload)
    resetTimeout()
    reliable_recvmess(myip, mycontext['p_portnum'], receiveMsg)

  setTimeout()
  reliable_recvmess(myip, mycontext['p_portnum'], receiveMsg)

def log(data):
  try:
    mycontext['filetosent'].write(data)
    mycontext['filetosent'].flush()
  except:
    print mycontext['p_outfile'],'cannot be written!'
    stopLogging()
    exitall()

def stopLogging():
  mycontext['filetosent'].close()

def startLogging():
  try:
    mycontext['filetosent'] = open(mycontext['p_outfile'], 'w')
  except:
    print mycontext['p_outfile'],'cannot be written!'
    exitall()

if callfunc == 'initialize':
  checkArgs()
  parseArgs()

  startLogging()
  startReceiving()
