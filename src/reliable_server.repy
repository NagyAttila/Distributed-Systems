include reliable.repy 

def usage():
  print "repy outfile portnum [timeout]"
  print "timeout is in seconds, default: 10sec"
### what is repy??? ###

def checkArgs():
  n = len(callargs)
  if not n == 3 and \
     not n == 4:
    usage()
    exitall()

def parseArgs():
  mycontext['timeout'] = 10
  n = len(callargs)
  if n >= 3:
    mycontext['repy'] = callargs[0]
    mycontext['outfile'] = callargs[1]
    mycontext['portnum'] = int(callargs[2])
  if n == 4:
    mycontext['timeout'] = int(callargs[3])

def setTimeout():
  mycontext['timeoutTimer'] = settimer(mycontext['timeout'], timeoutExpired, [])

def cancelTimeout():
  canceltimer(mycontext['timeoutTimer'])

def resetTimeout():
  cancelTimeout()
  setTimeout()

def timeoutExpired():
  stopLogging()
  exitall()

def startReceiving():
  myip = "127.0.0.1"
  def receiveMsg(remoteip, remoteport, message, commhandle):
    payload = get_payload(message)
    log(payload)
    resetTimeout()
    reliable_recvmess(myip, mycontext['portnum'], receiveMsg)

  setTimeout()
  reliable_recvmess(myip, mycontext['portnum'], receiveMsg)

def log(data):
  try:
    mycontext['filetosent'].write(data)
    mycontext['filetosent'].flush()
  except IOError as e:
    stopLogging()
    exitall()

def stopLogging():
  mycontext['filetosent'].close()

def startLogging():
  try:
    mycontext['filetosent'] = open(mycontext['outfile'], 'w')
  except IOError as e:
    print mycontext['outfile'],'cannot be written!'
    exitall()

if callfunc == 'initialize':
  checkArgs()
  parseArgs()


  startLogging()
  startReceiving()
